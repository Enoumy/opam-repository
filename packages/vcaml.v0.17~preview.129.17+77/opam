opam-version: "2.0"
maintainer: "Jane Street developers"
authors: ["Jane Street Group, LLC"]
homepage: "https://github.com/janestreet/vcaml"
bug-reports: "https://github.com/janestreet/vcaml/issues"
dev-repo: "git+https://github.com/janestreet/vcaml.git"
doc: "https://ocaml.janestreet.com/ocaml-core/latest/doc/vcaml/index.html"
license: "MIT"
build: [
  ["dune" "build" "-p" name "-j" jobs]
]
run-test: [
  ["./run-tests-in-opam.sh" name jobs]
]
depends: [
  "ocaml"                      {>= "4.14.0"}
  "async"                      {= "v0.17~preview.129.17+77"}
  "async_unix"                 {= "v0.17~preview.129.17+77"}
  "base_trie"                  {= "v0.17~preview.129.17+77"}
  "core"                       {= "v0.17~preview.129.17+77"}
  "core_kernel"                {= "v0.17~preview.129.17+77"}
  "core_unix"                  {= "v0.17~preview.129.17+77"}
  "expect_test_helpers_async"  {= "v0.17~preview.129.17+77"}
  "jsonaf"                     {= "v0.17~preview.129.17+77"}
  "man_in_the_middle_debugger" {= "v0.17~preview.129.17+77"}
  "ppx_jane"                   {= "v0.17~preview.129.17+77"}
  "ppx_optcomp"                {= "v0.17~preview.129.17+77"}
  "semantic_version"           {= "v0.17~preview.129.17+77"}
  "textutils"                  {= "v0.17~preview.129.17+77"}
  "angstrom"                   {>= "0.15.0"}
  "angstrom-async"             {>= "0.15.0"}
  "dune"                       {>= "2.0.0"}
  "faraday"                    {>= "0.8.1"}
  "re"                         {>= "1.8.0"}
]
available: arch != "arm32" & arch != "x86_32"
synopsis: "OCaml bindings for the Neovim API"
description: "

VCaml provides OCaml bindings for Neovim and models some of Neovim's trickier
semantics so plugin authors do not need to consider them when writing plugins.
Plugins communicate with Neovim remotely over Msgpack RPC (see `:h api` for
details).
"
post-messages: "

This version of VCaml is built and tested against Neovim 0.9.1. Because Neovim
is an evolving project and VCaml does not provide versionining guarantees,
expect the degree of breakage to increase the further away your version of
Neovim is from the tested version. The best way to ensure that nothing will
break unexpectedly for versions of Neovim you wish to support is to write tests
for your plugin.
"
url {
src: "https://github.com/janestreet/vcaml/archive/3c973cece3e9d0b70259314122ecf2dbcd96b4ea.tar.gz"
checksum: "sha256=55fa63287a16c3a74a4ec1c0c4c4d157999c1430dbd5dd2b1daf49c5def938cf"
}
