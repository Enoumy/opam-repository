opam-version: "2.0"
maintainer: "Jane Street developers"
authors: ["Jane Street Group, LLC"]
homepage: "https://github.com/janestreet/splay_tree"
bug-reports: "https://github.com/janestreet/splay_tree/issues"
dev-repo: "git+https://github.com/janestreet/splay_tree.git"
doc: "https://ocaml.janestreet.com/ocaml-core/latest/doc/splay_tree/index.html"
license: "MIT"
build: [
  ["dune" "build" "-p" name "-j" jobs]
]
depends: [
  "ocaml"    {>= "4.14.0"}
  "core"     {= "v0.17~preview.128.37+01"}
  "ppx_jane" {= "v0.17~preview.128.37+01"}
  "dune"     {>= "2.0.0"}
]
available: arch != "arm32" & arch != "x86_32"
synopsis: "A splay tree implementation"
description: "
Splay trees are binary search trees that move recently accessed nodes
closer to the root for easier access.  They have amortized O(log
n)-time access for a large enough sequence of primitive operations.

A splay trees may outperform other trees such as red-black trees when
recently accessed items are more likely to be accessed in the near
future.

Notably, this splay tree implementation is parameterized by a
reduction operation which lets you specify an extra accumulator value,
which can then be searched by efficiently.
"
url {
src: "https://github.com/janestreet/splay_tree/archive/refs/tags/v0.17-preview-with-extensions.tar.gz"
checksum: "sha256=4a658cf69b73adad81909be75b0eef38d5833e7ff38b8c0ec46191d3caaa01b5"
}
